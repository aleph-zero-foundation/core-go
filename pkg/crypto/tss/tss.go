// Package tss implements a threshold signature scheme.
package tss

import (
	"gitlab.com/alephledger/core-go/pkg/crypto/bn256"
	"gitlab.com/alephledger/core-go/pkg/crypto/encrypt"
)

// TSS is a set of all raw threshold keys generated by a dealer for all parties.
type TSS struct {
	threshold uint16
	globalVK  *bn256.VerificationKey
	vks       []*bn256.VerificationKey
	sks       []*bn256.SecretKey
}

// ThresholdKey contains encrypted secretKeys of other parties
// and decrypted key of the owner.
type ThresholdKey struct {
	owner     uint16
	dealer    uint16
	threshold uint16
	globalVK  *bn256.VerificationKey
	vks       []*bn256.VerificationKey
	encSKs    []encrypt.CipherText
	sk        *bn256.SecretKey
}

// WeakThresholdKey is a threshold key that can produce shares iff
// the owner is a share provider
type WeakThresholdKey struct {
	ThresholdKey
	shareProviders map[uint16]bool
}

// Share is a share of the coin owned by a process.
type Share struct {
	owner uint16
	sgn   *bn256.Signature
}

// Owner returns owner's PID of this share.
func (sh *Share) Owner() uint16 {
	return sh.owner
}

// Signature is a result of merging Shares.
type Signature struct {
	sgn *bn256.Signature
}

// Threshold returns the threshold of the given ThresholdCoin.
func (tk *ThresholdKey) Threshold() uint16 {
	return tk.threshold
}

// ShareProviders returns the map describing which parties may produce shares of signatures.
func (wkt *WeakThresholdKey) ShareProviders() map[uint16]bool {
	return wkt.shareProviders
}
